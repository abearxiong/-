<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-10-19T14:07:39+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Abear</title><subtitle>每一天都是一个新的开始，今天与明天最大的不同，今天我还活着，明天却毫无感觉。所以时刻注重今天的美好时光，写好代码，玩好，IT男。</subtitle><entry><title type="html">Https加密和Apache反向代理问题!</title><link href="http://localhost:4000/ubuntu/2018/10/03/install-https-for-vps.html" rel="alternate" type="text/html" title="Https加密和Apache反向代理问题!" /><published>2018-10-03T15:06:57+00:00</published><updated>2018-10-03T15:06:57+00:00</updated><id>http://localhost:4000/ubuntu/2018/10/03/install-https-for-vps</id><content type="html" xml:base="http://localhost:4000/ubuntu/2018/10/03/install-https-for-vps.html">&lt;h1 id=&quot;digitalocean-vps-加密服务器为https和反向代理&quot;&gt;DigitalOcean VPS 加密服务器为HTTPS和反向代理&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;因为有一些Token，登陆模块，想只放在一个自己常用的服务器，然后就使用了nodejs来作为一个登陆模块。在面对Microsoft outlook OAuth的时候发现一个问题，他的回调函数必须是https的样式的。于是，自己去找办法设置自己的网站的http进行加密。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;很多是网上找到的，自己只记下自己成功的步骤，不对过程做更多了解。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在这过程自己去gandi网站买了个6元的域名，gnoixiong.qw；修改为了digitalOcean的dns，发现需要很久才能更新成功，可以访问。修改为DigitalOcean的DNS是为了测试他自带的均衡加载，最后弄了快差不多的时候发现需要每个月10美元，放弃。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;digitalocean-vps-http-加密ubuntu170使用lets-encrypt&quot;&gt;DigitalOcean VPS http 加密（Ubuntu17.0）&lt;strong&gt;使用Let’s Encrypt&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;第一次是Google到的，但是最后遇到的问题是不支持什么的错误，而且根据官网的解决办法无效，记得是&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo certbot --authenticator standalone --installer apache -d www.gnoixiong.pw --pre-hook &quot;service apache stop&quot; --post-hook &quot;service apache start&quot;
&lt;/code&gt;，2019年1月什么之前。[此刻时间2018.10.2]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;根据url成功&quot;&gt;根据&lt;a href=&quot;https://devanswers.co/lets-encrypt-ssl-apache-ubuntu-18-04/&quot;&gt;url&lt;/a&gt;成功&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo add-apt-repository ppa:certbot/certbot&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;输入Enter&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install python-certbot-apache&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538577134/github/images/2018-10-03-01.png&quot; alt=&quot;图1&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;suto certbot --apache -d gnoixiong.pw -d www.gnoixiong.pw
xiongxiao1012@outlook.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538577134/github/images/2018-10-03-02.png&quot; alt=&quot;图2&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538577134/github/images/2018-10-03-03.png&quot; alt=&quot;图3&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;检测是否成功&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538577134/github/images/2018-10-03-04.png&quot; alt=&quot;图4&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;如图类似的URL去检测
https://www.ssllabs.com/ssltest/analyze.html?d=www.gnoixiong.pw
https://www.ssllabs.com/ssltest/analyze.html?d=gnoixiong.pw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo certbot renew --dry-run&lt;/code&gt; 执行自动申请证书&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;反向代理问题&quot;&gt;反向代理问题&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;当我的https弄好后，发现Microsoft需要https才行，而我弄好的只是php的，nodejs的3000端口还是http接口。所以需要反向代理，之前玩微信小程序的时候知道NGINX可以反向代理，而去了解资料知道Apache同样可以，并通过一系列查资料成功完成。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538577134/github/images/2018-10-03-05.png&quot; alt=&quot;图5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;过程&quot;&gt;过程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;加载apache模块，使用a2enmod命令加载模块&lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a2enmod proxy proxy_balancer proxy_http
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;配置反向代理功能，进入sites_available(Ubuntu /etc/apache2/sites_available)，创建一个新的站点配置文件(新建文件），然后编辑内容如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
        #配置站点的域名
        ServerName xxx.com
        #off表示开启反向代理，on表示开启正向代理
        ProxyRequests Off
        ProxyMaxForwards 100
        ProxyPreserveHost On
        ProxyPass / http://127.0.0.1:3000/
        ProxyPassReverse / http://127.0.0.1:3000/
        &amp;lt;Proxy *&amp;gt;
            Order Deny,Allow
            Allow from all
        &amp;lt;/Proxy&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a2ensite&lt;/code&gt;加载刚才那个文件，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl restart apache2&lt;/code&gt;  重启,即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;https的有东西&quot;&gt;https的有东西&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;在之前的http是可以已经算是完成了，然后代理也没毛病，然后却发现一个大的问题，https不行，仍旧是之前的443端口，而且没有代理。Google了一会，然后自己慢慢摸索已经是好的配置，关于443的配置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;重复修改已经有的443的那个配置文件，发现一直不能成功。&lt;/li&gt;
  &lt;li&gt;根据已经有的配置文件，复制出来，创建一个新的文件，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;a2ensite&lt;/code&gt; 加载新的文件，等于默认一个域名，代理一个域名，后成功。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;配置文件在最下&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参考文献:
    简书&lt;a href=&quot;https://www.jianshu.com/p/47eca94680aa&quot;&gt;zhengyu4767&lt;/a&gt; |
    CSDN&lt;a href=&quot;https://blog.csdn.net/aerchi/article/details/73605496&quot;&gt;乐意黎&lt;/a&gt; |
    自己对已经好的配置的理解，保存之前配置好的文件，很重要。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#关于HTTPS的配置文件
&amp;lt;IfModule mod_ssl.c&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
ServerName www.gnoixiong.pw
DocumentRoot /var/www/LoginApi
SSLEngine On
Include /etc/letsencrypt/options-ssl-apache.conf
#ServerAlias www.gnoixiong.pw
SSLCertificateFile /etc/letsencrypt/live/gnoixiong.pw/fullchain.pem
SSLCertificateKeyFile /etc/letsencrypt/live/gnoixiong.pw/privkey.pem

ProxyRequests Off
ProxyMaxForwards 100
ProxyPreserveHost On
ProxyPass / http://127.0.0.1:3000/
ProxyPassReverse / http://127.0.0.1:3000/
&amp;lt;Proxy *&amp;gt;
        Order Deny,Allow
        Allow from all
&amp;lt;/Proxy&amp;gt;

&amp;lt;/VirtualHost&amp;gt;
&amp;lt;/IfModule&amp;gt;

#关于HTTP的配置文件

&amp;lt;VirtualHost *:80&amp;gt;
        #配置站点的域名
        ServerName gnoixxiong.pw
        #配置站点的管理员信息
        ServerAdmin xiongxiao1012@outlook.com

        #off表示开启反向代理，on表示开启正向代理
        ProxyRequests Off
        ProxyMaxForwards 100
        ProxyPreserveHost On
        #这里表示要将现在这个虚拟主机跳转到本机的4000端口
        ProxyPass /var/www/LoginApi  http://127.0.0.1:3000/
        ProxyPassReverse /var/www/LoginApi http://127.0.0.1:3000/

        &amp;lt;Proxy *&amp;gt;
            Order Deny,Allow
            Allow from all
        &amp;lt;/Proxy&amp;gt;

&amp;lt;/VirtualHost&amp;gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">DigitalOcean VPS 加密服务器为HTTPS和反向代理</summary></entry><entry><title type="html">使用npm</title><link href="http://localhost:4000/node/2018/10/01/remeber-to-use-npm.html" rel="alternate" type="text/html" title="使用npm" /><published>2018-10-01T00:13:57+00:00</published><updated>2018-10-01T00:13:57+00:00</updated><id>http://localhost:4000/node/2018/10/01/remeber-to-use-npm</id><content type="html" xml:base="http://localhost:4000/node/2018/10/01/remeber-to-use-npm.html">&lt;h1 id=&quot;使用npm&quot;&gt;使用npm&lt;/h1&gt;

&lt;h2 id=&quot;提出问题&quot;&gt;提出问题&lt;/h2&gt;

&lt;p&gt;对于目前所用的npm的基础部分，我感觉很薄弱，然后我需要去了解最基本的使用和扩展方面的知识，通过了解这些内容来增加我的知识储备。&lt;/p&gt;

&lt;p&gt;在做笔记的过程当中来学习如何去做笔记。&lt;/p&gt;

&lt;p&gt;首先作为一个程序员，之前一直没有注意过版本问题，现在很有必要去实现他，用nvm来管理node的使用，而用npm来下载在网络上流行的各种包。所以我最开始的步骤是删除之前已经拥有的node的包和npm的包，然后下载nvm。&lt;/p&gt;

&lt;p&gt;nvm的基础语法不多。&lt;/p&gt;

&lt;h3 id=&quot;nvm使用&quot;&gt;nvm使用&lt;/h3&gt;
&lt;p&gt;使用的方法很简便。重点只需要记下这么几个。&lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm install &amp;lt;version&amp;gt;&lt;/code&gt;下载具体版本&lt;code class=&quot;highlighter-rouge&quot;&gt;uninstall&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm list&lt;/code&gt;查看node.js的安装，&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm on/off&lt;/code&gt;启动版本控制和关闭。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm use&amp;lt;version&amp;gt;&lt;/code&gt;使用那个版本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm ls-remote&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;nvm current&lt;/code&gt;
注意
nvm安装后需要配置环境，其一，不要自己去帮他创建文件。因为自动管理，使用nvm use的时候，会是修改一个快捷方式，自己尝试的时候发现，node的环境变量设置为e:/nodejs，然后在e下创建了一个nodejs的文件夹，nvm use后，不会自动切换，只能手动管理。npm是切到最新版的npm去设置npm全局安装包位置，然后安装全局npm（为了可以全局使用，然后设置他的环境变量）。
&lt;strong&gt;扩展方面&lt;/strong&gt;–windows点击install.cmd配置环境
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm node_mirror  https://npm.taobao.org/mirrors/node/
nvm npm_mirror https://npm.taobao.org/mirrors/npm/
nvm root &amp;lt;path&amp;gt; 设置路径
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;下载好后，我的步骤。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm node_mirror  https://npm.taobao.org/mirrors/node/
nvm npm_mirror https://npm.taobao.org/mirrors/npm/
nvm install latest
nvm use 10.11.0
npm config set prefix &quot;E:\node\npm&quot;
配置用户文件夹下 .npmrc
npm install npm -g --registry=https://registry.npm.taobao.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;之后不重要 nrm是npm源管理器
npm install -g cnpm –registry=http://r.cnpmjs.org&lt;/p&gt;

&lt;p&gt;npm install -g nrm&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
## npm使用命令

1. `npm outdated` 和`npm update` 
2. npm install 
    1. -g 是全局
    2. --save是保存到package.json作为dependency
    3. --save-dev 作为devDependency 
    4. 删除如上，参数类似，方法是uninstall

## 扩展方面
1.  `npm whoami`查看用户
2.  `npm adduser`+输入用户名密码和邮箱 添加用户
3.  `npm root`
4.  `npm ls`显示安装的包
5.  `npm star&amp;lt;package&amp;gt;` `npm stars`
6.  `npm doctor`检查环境，比如npm的地址，node版本，检查ping
7.  `npm docs`检查文档
8.  `npm build` `npm rebuild` 
9.  `npm prune` 移出无关的包`npm deprecate`移出重复包
10.  `npm repo &amp;lt;package&amp;gt;`在浏览器中打开指定的源码仓库页面
11.  `npm view`查看注册信息
12.  `npm publish`出版

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;access, adduser, audit, bin, bugs, c, cache, ci, cit,
completion, config, create, ddp, dedupe, deprecate,
dist-tag, docs, doctor, edit, explore, get, help,
help-search, hook, i, init, install, install-test, it, link,
list, ln, login, logout, ls, outdated, owner, pack, ping,
prefix, profile, prune, publish, rb, rebuild, repo, restart,
root, run, run-script, s, se, search, set, shrinkwrap, star,
stars, start, stop, t, team, test, token, tst, un,
uninstall, unpublish, unstar, up, update, v, version, view,
whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;npm配置&lt;/p&gt;

&lt;p&gt;folders&lt;/p&gt;

&lt;p&gt;package-lock.json&lt;/p&gt;

&lt;p&gt;package.json&lt;/p&gt;

&lt;p&gt;npmrc&lt;/p&gt;

&lt;p&gt;package-locks&lt;/p&gt;

&lt;p&gt;shrinkwrap.json
```&lt;/p&gt;</content><author><name></name></author><summary type="html">使用npm</summary></entry><entry><title type="html">关于第一次搭建Jekyll的总结</title><link href="http://localhost:4000/jekyll/blog/2018/09/25/how-to-install-jekyll.html" rel="alternate" type="text/html" title="关于第一次搭建Jekyll的总结" /><published>2018-09-25T07:00:00+00:00</published><updated>2018-09-25T07:00:00+00:00</updated><id>http://localhost:4000/jekyll/blog/2018/09/25/how-to-install-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/blog/2018/09/25/how-to-install-jekyll.html">&lt;h1 id=&quot;从零开始搭建jekyll&quot;&gt;从零开始搭建Jekyll&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;距离搭建完成Jekyll已经有很多天了，然后今天来总结一下当时的做法和想法。和当时记下的一点笔记。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装过程&quot;&gt;安装过程&lt;/h2&gt;

&lt;p&gt;首先安装Ruby20，却发现Ruby主要流行在Linux社区，在window社区对新手很不友好，网上如是说，所以我听从了建议，不安装window版本，但是自己也没有linux的电脑，除了vps服务器。但是用来做git托管网站，还是放在自己电&amp;gt;脑更好了。于是我首先安装了VMware Workstation14,下载地址：搜简书CSDN很多，下载Ubuntu18.04,Ubuntu中文网，官网都有，简略安装方式–ubuntu安装。只是因为Ubuntu18好像硬件需求2G以上让我考虑了一会，自己电脑能带动不，但是一直找不到16.04的&amp;gt;需求，最后还是选择了18.04版本。在2或者3个小时内，边学习其他，边下载和安装，搞定后开始学习安装jekyll。&lt;/p&gt;

&lt;p&gt;第一步：安装 Ruby和RubyGems.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install Ruby RubyGems
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二步：安装jekyll,安装需要前置依赖，g++，gcc，make；如果没有自己安装（&lt;code class=&quot;highlighter-rouge&quot;&gt;apt install g++ gcc make&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第三步：安装bundler&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第四步：创建自己的博客，进入博客根目录并初始化和本地化服务&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new myblog
bundler install
bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第五步：克隆自己name.github.io的项目（安装设置git&lt;a href=&quot;#git简略设置&quot;&gt;方法&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:abearxiong.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;复制博客中的内容到自己设置的项目中
第六步：提交自己更改的内容&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;提交备注名&quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;到自己的name.github.io查找自己的结果。安装完全结束。之后的内容就是对自己的托管博客进行自定义操作。进行修改自己的主题设置。&lt;/p&gt;

&lt;h2 id=&quot;安装原因&quot;&gt;安装原因&lt;/h2&gt;

&lt;p&gt;突然间有点无聊了，然后就想到了我的abearxiong.io的小托管什么的网站，我过去什么都没有做，因为什么联想到了这个，于是去关注了hexo，jekyll和hugo。应该最先看到的是hexo，看到有个github.io的网站，然后看到他托管了三个网站，同一个类容，突然就很想去了解这些东西。然后了解hexo和jekyll的区别，再知道hugo。百度和google到的内容全都是hexo和从jekyll，很奇怪，看到github中star的还是jekyll多，我也不知道为什么。
&lt;img src=&quot;https://res.cloudinary.com/xiongxiao/image/upload/v1538282254/github/images/2018-9-30.png&quot; alt=&quot;github比较图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对这几门而言，在Google的过程中，自己也不知道该选jekyll还是选择hexo，然后突然发现一个真实情况，github中推的jekyll，相当于jekyll是github推荐的，那么何不必在github中使用jekyll呢，如果还有兴趣，在码云和coding中各种搭建一个不同类型的呢。也许还是挺有趣的。&lt;/p&gt;

&lt;p&gt;说动就动的旅行开始了，开始了解更深入的jekyll，发现他是一门我从没有接触的Ruby语言而来的，了解Ruby的过程中，很多人赞扬他的语法糖，对于我来说，也许我接触这个，也是接触了一门新的语言了，又可以玩耍一门新的语&amp;gt;言就是很好玩的一件事情了。毕竟在学校此刻的我就是一种奇怪的人，如果交计算机作业，项目什么的，我就在想，我是不是能交一个新的作业，新的不同的没有学过的语言来编写的作业，java，c#，c，mfc，nodejs，php等等。都
是很有趣的语言。&lt;/p&gt;

&lt;h2 id=&quot;扩展阅读&quot;&gt;扩展阅读&lt;/h2&gt;

&lt;h3 id=&quot;ubutu安装&quot;&gt;ubutu安装&lt;/h3&gt;

&lt;p&gt;安装ubuntu 快速版
可以使用软件&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Universal USB Installer&lt;/li&gt;
  &lt;li&gt;rufus
两个都是刻录U盘的工具。把下载下来的ios格式的Ubuntu刻录到U盘
直接U盘启动，也不需要去看什么教程。
直接下一步，下一步，然后就完成了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果安装window也是类似的，在window下可以直接点开window的ios安装包安装window或者更新windows。&lt;/p&gt;

&lt;p&gt;如果安装到虚拟机，只是不需要使用这个软件罢了。&lt;/p&gt;

&lt;h3 id=&quot;git简略设置-安装过程&quot;&gt;git简略设置 &lt;a href=&quot;#安装过程&quot;&gt;安装过程&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里主要讲一点git的基础配置问题
在Ubuntu内，需要远程github，然后才能进行操作其他的必要的内容。&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;第一配置邮箱等信息&lt;/li&gt;
    &lt;li&gt;第二设置rsa配置问题&lt;/li&gt;
    &lt;li&gt;拷贝内容到github网站。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;配置全局姓名和邮箱&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global user.name &quot;abearxiong&quot;

git config --global user.email &quot;xiongxiao1012@outlook.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;配置rsa&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -C &quot;xiongxiao1012@outlook.com&quot;
cd ~/.ssh/id_rsa.pub 

#复制内容到github中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;复制id_rsa.pub的内容到github中&lt;/p&gt;

&lt;p&gt;基本使用方法 k&lt;/p&gt;

&lt;p&gt;git pull  #更新到远
git add . #本地修改和增加
git push  #推送
git status #状态&lt;/p&gt;</content><author><name></name></author><summary type="html">从零开始搭建Jekyll</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/09/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-09-23T14:13:57+00:00</published><updated>2018-09-23T14:13:57+00:00</updated><id>http://localhost:4000/jekyll/update/2018/09/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/09/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">The happy day</title><link href="http://localhost:4000/1995/10/12/Greate-Day.html" rel="alternate" type="text/html" title="The happy day" /><published>1995-10-12T00:00:00+00:00</published><updated>1995-10-12T00:00:00+00:00</updated><id>http://localhost:4000/1995/10/12/Greate-Day</id><content type="html" xml:base="http://localhost:4000/1995/10/12/Greate-Day.html">&lt;p&gt;In this day. My life is begin&lt;/p&gt;

&lt;h1 id=&quot;can-use&quot;&gt;can use&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;d ok&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;mulu&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dfd&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><summary type="html">In this day. My life is begin</summary></entry></feed>