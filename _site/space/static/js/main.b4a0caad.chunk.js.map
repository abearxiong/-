{"version":3,"sources":["store/state.js","actions/ReposActionsType.js","store/reducers/index.js","store/reducers/ReposReducers.js","store/index.js","actions/ReposActions.js","graphql/repository.js","actions/Config.js","actions/index.js","components/post.js","components/home.js","components/edit.js","App.js","serviceWorker.js","index.js"],"names":["store_state","config","pageTitle","user","SET_ISSUE","Symbol","SET_ISSUES","SET_REPOS","combineReducers","setIssue","state","arguments","length","undefined","defaultState","action","type","Types","issue","data","Object","assign","setIssues","issues","console","log","store","createStore","reducers","applyMiddleware","thunk","client","repos","Repository","classCallCheck","this","owner","name","labels","concat","graphql","currentPage","first","after","gql","_templateObject","number","_templateObject2","setConfig","cf","token","httpLink","HttpLink","uri","headers","Authorization","ApolloClient","link","cache","InMemoryCache","Repos","dispatch","query","getIssues","then","res","repository","getIssue","setRepos","start","end","Post","props","_this","possibleConstructorReturn","getPrototypeOf","call","params","match","msg","setState","CardIssue","_this2","react_default","a","createElement","Card","className","Header","title","Title","createdAt","Body","dangerouslySetInnerHTML","__html","bodyHTML","Container","Button","onClick","e","handleClick","Component","connect","ownProps","Home","message","spaces","alert","value","CardIssues","ButtonNext","ButtonPre","CardTotalCount","edges","pageInfo","totalCount","map","list","index","date","Date","node","key","toLocaleString","Footer","reactions","comments","hasPreviousPage","preClick","startCursor","hasNextPage","nextClick","endCursor","ButtonGroup","Edit","App","es","react_router_dom","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4a0caad.chunk.js","sourcesContent":["export default {\r\n    config:{},\r\n    pageTitle:\"首页\",\r\n    user:[]\r\n }","export const SET_CONFIG = Symbol('SET_CONFIG')\r\nexport const GET_STATE = Symbol('GET_STATE')\r\nexport const SET_ISSUE = Symbol('SET_ISSUE')\r\nexport const SET_ISSUES = Symbol('SET_ISSUES')\r\nexport const SET_CLIENT = Symbol('SET_CLIENT')\r\nexport const SET_REPOS = Symbol('SET_REPOS')\r\n","import {combineReducers} from 'redux'\r\nimport { setIssue,setIssues } from \"./ReposReducers\"\r\n\r\nexport default combineReducers({\r\n    setIssue,setIssues\r\n})","// 它就是将来真正要用到的数据，我们将其统一放置在reducers.js文件\r\nimport defaultState from '../state.js'\r\nimport * as Types from '../../actions/ReposActionsType'\r\nfunction setIssue(state = defaultState.config,action){\r\n    switch(action.type){\r\n        case Types.SET_ISSUE:\r\n        state.issue = action.data\r\n        //console.log(\"得到\",state,\"data\",action,action.type)\r\n        //return state\r\n        return Object.assign({},state) //直接返回state是不会自动的刷新的\r\n        default:\r\n        return state\r\n    }\r\n}\r\nfunction setIssues(state = defaultState.config,action){\r\n    switch(action.type){\r\n        case Types.SET_ISSUES:\r\n        state.issues = action.data\r\n        console.log(\"得到\",state,\"data\",action,action.type)\r\n        //return state\r\n        return Object.assign({},state)\r\n        default:\r\n        return state\r\n    }\r\n}\r\nfunction setConfig (state = defaultState.config,action){\r\n    switch(action.type){\r\n        case Types.SET_CONFIG:\r\n        state.config = action.data\r\n        //console.log(\"进入\",state,\"data\",action,action.type)\r\n        return state\r\n        case Types.SET_CLIENT:\r\n        state.client = action.data\r\n        //console.log(\"进入\",state,\"data\",action,action.type)\r\n        return state\r\n        default:\r\n        //console.log(\"得到\",state,\"data\",action,action.type)\r\n        return state\r\n    }\r\n}\r\nfunction pageTitle (state = defaultState.pageTitle,action) {\r\n// 不同的action有不同的处理逻辑\r\n    switch (action.type) {\r\n        case 'SET_PAGE_TITLE':\r\n        return action.data\r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\nfunction user (state = defaultState.user, action){\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n        return action.data\r\n        default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport {\r\n    setIssue,\r\n    setIssues,\r\n    setConfig,\r\n    pageTitle,\r\n    user\r\n}","// index.js\r\n// applyMiddleware: redux通过该函数来使用中间件\r\n// createStore: 用于创建store实例\r\nimport { applyMiddleware, createStore } from 'redux'\r\n\r\n// 中间件，作用：如果不使用该中间件，当我们dispatch一个action时，需要给dispatch函数传入action    \r\n// 对象；但如果我们使用了这个中间件，那么就可以传入一个函数，\r\n// 这个函数接收两个参数:dispatch和    getState。这个dispatch可以在将来的异步请求完成后使用，对于异步action很有用\r\nimport thunk from 'redux-thunk'\r\n\r\n// 引入reducer\r\nimport reducers from './reducers/index'\r\n\r\n// 创建store实例\r\nlet store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n)\r\n//console.log(\"引入了store\",reducers)\r\nexport default store","import * as Types from \"./ReposActionsType\"\r\nimport {config} from \"./Config\"\r\nvar client \r\nvar repos \r\nexport const setConfig = (data)=>{\r\n    let cf = config(data)\r\n    client = cf.client\r\n    repos = cf.repos\r\n}\r\nexport const setIssues = (data = {}) => {\r\n    return (dispatch)=>{\r\n        let type = data.type || \"next\"\r\n        let first = data.first || 2\r\n        let after = data.after\r\n        client.query({query:repos.getIssues(type,first,after)}).then(res=>{\r\n            console.log(\"issues获取的内容\",res)\r\n            //let issues = res.data.repository.issues\r\n            dispatch({type:Types.SET_ISSUES, data: res.data.repository.issues})\r\n        }) \r\n    }\r\n}\r\n// 设置post内容\r\nexport const setIssue = (data = {}) => {\r\n    return (dispatch)=>{\r\n        let number = data.number || 6\r\n        let first = data.first || 10\r\n        let after = data.after\r\n        client.query({query:repos.getIssue(number,first,after)}).then(res=>{\r\n            let issue = res.data.repository.issue\r\n            dispatch({type:Types.SET_ISSUE, data:issue})\r\n        }) \r\n    }\r\n}\r\n// 异步获取内容\r\nexport const setRepos = (type,start,end) => {\r\n    return (dispatch)=>{\r\n        dispatch({type: Types.SET_REPOS})\r\n    }\r\n  };\r\n","import gql from 'graphql-tag'\r\nclass Repository {\r\n  constructor(config) {\r\n    this.owner = config.owner\r\n    this.name = config.name\r\n    this.labels = config.labels ? `,labels:\"${config.labels}\"` : \"\"\r\n    this.graphql = \"\"\r\n    this.currentPage = \"first:10\"\r\n  }\r\n  getIssues(type, first, after, labels) {\r\n    if(type === \"next\"){\r\n      first = first? `first:${first}`:\"\"\r\n      after =after?`,after:\"${after}\"`:\"\"\r\n    }else{\r\n      first = first? `last:${first}`:\"\"\r\n      after =after?`,before:\"${after}\"`:\"\"\r\n    }\r\n    labels = labels?`,labels:\"${labels}\"`: this.labels\r\n    console.log(\"gql set\",labels)\r\n    return gql `\r\n        {\r\n          repository(owner: \"${this.owner}\", name: \"${this.name}\") {\r\n              issues(${first} ${after} ${labels},orderBy:{field:CREATED_AT,direction:DESC}){\r\n                totalCount\r\n                pageInfo {\r\n                  endCursor\r\n                  startCursor\r\n                  hasNextPage\r\n                  hasPreviousPage\r\n                } \r\n                edges {\r\n                  node {\r\n                    id\r\n                    title\r\n                    bodyHTML\r\n                    body\r\n                    author{\r\n                        login\r\n                    }\r\n                    createdAt\r\n                    comments {\r\n                     totalCount\r\n                    }\r\n                    reactions(content:HEART){\r\n                      totalCount\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n          }\r\n        }\r\n        `\r\n  }\r\n  getIssue(number, first, after) {\r\n    number = `number:${number}`\r\n    first = first? `first:${first}`:\"\"\r\n    after =after?`,after:\"${after}\"`:\"\"\r\n    //,orderBy:{field:CREATED_AT,direction:DESC}\r\n    return gql `\r\n        {\r\n          repository(owner: \"${this.owner}\", name: \"${this.name}\") {\r\n              issue(${number}){\r\n                id\r\n                title\r\n                bodyHTML\r\n                body\r\n                author{\r\n                  login\r\n                }\r\n                createdAt\r\n                comments( ${first} ${after}) {\r\n                  totalCount\r\n                  edges{\r\n                    node{\r\n                      bodyHTML\r\n                      author{\r\n                        login\r\n                      }\r\n                      reactions(content:HEART){\r\n                        totalCount\r\n                      }\r\n                      createdAt\r\n                    }\r\n                    cursor\r\n                  }\r\n                }\r\n                reactions(content:HEART){\r\n                  totalCount\r\n                }\r\n              }\r\n          }\r\n        }\r\n        `\r\n  }\r\n}\r\nexport default Repository;","import {ApolloClient}from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport Repos from \"../graphql/repository\"\r\n\r\nexport const config = (data)=>{\r\n    if(!data)return\r\n    let token = data.token\r\n    const httpLink = new HttpLink({\r\n        uri: 'https://api.github.com/graphql', // 配置请求url \r\n        headers: { // 配置header\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n    const client =  new ApolloClient({\r\n        link:  httpLink,\r\n        cache: new InMemoryCache() // 缓存\r\n    })  \r\n    // 增加配置\r\n    const repos = new Repos(data)\r\n    return{\r\n        client,repos\r\n    }\r\n}\r\n","import * as Repos from \"./ReposActions\";\r\nlet Actions = Repos\r\n// Repos\r\nexport const setIssue = Repos.setIssue;\r\nexport const setIssues = Repos.setIssues;\r\n\r\n// All\r\nexport default Actions","import React, { Component } from 'react';\r\nimport {Container,Card,Button, CardColumns} from 'react-bootstrap';\r\nimport { connect } from 'react-redux'\r\nimport { setIssue } from '../actions';\r\nclass Post extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    //console.log(props)\r\n    let params = props.match.params\r\n    let number = params.number?params.number:6\r\n    this.state = {msg:\"msg hhh\",number}\r\n  }  \r\n  componentDidMount () {\r\n    let setIssue = this.props.setIssue\r\n    let number = this.state.number\r\n    console.log(\"Post初始化\",number)\r\n    setIssue({number}) // number first after 后面两个是评论的\r\n  }\r\n  handleClick(){\r\n    this.setState({\r\n      msg:\"msg修改\"\r\n    })\r\n    console.log(this)\r\n  };\r\n  render() {\r\n    let CardIssue\r\n    if(this.props.state.setIssue.issue){\r\n      let issue = this.props.state.setIssue.issue\r\n      CardIssue = (\r\n          <Card className=\"post-content\">\r\n            <Card.Header>{issue.title}</Card.Header>\r\n            <Card.Title>{issue.createdAt}</Card.Title>\r\n            <Card.Body  dangerouslySetInnerHTML = {{ __html: issue.bodyHTML }}/>              \r\n          </Card>\r\n      )\r\n    }else{\r\n      CardIssue = (<Card>等等</Card>)\r\n    }\r\n    return (  \r\n        <Container className=\"xx-space-post\">\r\n          <Card>\r\n          {CardIssue}\r\n          </Card>\r\n          <Card>\r\n            放评论的地方\r\n          </Card>\r\n          <Button onClick={(e)=>this.handleClick(e)}>Evernote</Button>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// mapStateToProps：将state映射到组件的props中\r\nconst mapStateToProps = (state) => {\r\n  console.log(\"state 映射\",state)\r\n  return {\r\n      state\r\n  }\r\n}\r\n// mapDispatchToProps：将dispatch映射到组件的props中\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\nreturn {\r\n  setIssue(data){\r\n    dispatch(setIssue(data))\r\n  }\r\n}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)\r\n//export default Post;\r\n","import React, { Component } from 'react';\r\nimport {Container,Card,Button, CardColumns, ButtonGroup} from 'react-bootstrap';\r\nimport { setIssues } from '../actions';\r\nimport { connect } from 'react-redux'\r\nclass Home extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      message: \"test\",\r\n      spaces: []\r\n    };\r\n    console.log(props)\r\n  }\r\n  componentDidMount () {\r\n    let {setIssues} = this.props\r\n    console.log(\"Home 初始化\")\r\n    setIssues()\r\n  }\r\n  handleClick(){\r\n    alert(\"home\")\r\n  };\r\n  preClick(e,value){\r\n    let {setIssues} = this.props\r\n    let data = {}\r\n    data.type = \"previous\"\r\n    data.after = value\r\n    console.log(\"设置上一页\",data)\r\n    setIssues(data)\r\n  }\r\n  nextClick(e,value){\r\n    let {setIssues} = this.props\r\n    let after = value\r\n    console.log(\"设置下一页\",after)\r\n    setIssues({after})\r\n  }\r\n  render() {\r\n    let CardIssues\r\n    let ButtonNext=\"\",ButtonPre=\"\",CardTotalCount=\"\"\r\n    if(this.props.state.setIssues.issues){\r\n      let issues = this.props.state.setIssues.issues\r\n      let edges = issues.edges\r\n      let pageInfo = issues.pageInfo\r\n      let totalCount = issues.totalCount\r\n      CardIssues = edges.map((list,index) => {\r\n        let date = new Date(list.node.createdAt)\r\n        return (\r\n          <Card key = {index}>\r\n            <Card.Header>{list.node.title}</Card.Header>\r\n            <Card.Title>{date.toLocaleString()}</Card.Title>\r\n            <Card.Body dangerouslySetInnerHTML = {{ __html:list.node.bodyHTML }}></Card.Body>\r\n            <Card.Footer>{list.node.reactions.totalCount}|comments: {list.node.comments.totalCount}</Card.Footer>\r\n          </Card>)\r\n      })\r\n      if(pageInfo.hasPreviousPage){\r\n        ButtonPre = (<Button onClick={(e)=>this.preClick(e,pageInfo.startCursor)}>上一页</Button>)\r\n      }\r\n      if(pageInfo.hasNextPage){\r\n        ButtonNext = (<Button onClick={(e)=>this.nextClick(e,pageInfo.endCursor)}>下一页</Button>)\r\n      }\r\n      CardTotalCount = <div>{totalCount}</div>\r\n    }else{\r\n      CardIssues = (\r\n        <Card>\r\n          请骚等\r\n        </Card>\r\n      )\r\n    }\r\n    return (  \r\n        <Container className=\"xx-space\">\r\n          <Card>\r\n            <Card.Body>\r\n\r\n                {CardIssues}\r\n              \r\n            </Card.Body>\r\n            <ButtonGroup>\r\n              {ButtonPre}{ButtonNext} \r\n            </ButtonGroup>\r\n            <Card.Footer>\r\n              {CardTotalCount}\r\n            </Card.Footer>\r\n          </Card>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// mapStateToProps：将state映射到组件的props中\r\nconst mapStateToProps = (state) => {\r\n  console.log(\"state 映射\",state)\r\n  return {\r\n      state\r\n  }\r\n}\r\n// mapDispatchToProps：将dispatch映射到组件的props中\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    setIssues(data){\r\n      dispatch(setIssues(data))\r\n    }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n","import React, { Component } from 'react';\r\nimport {Container,Card,Button, CardColumns} from 'react-bootstrap';\r\n\r\nclass Edit extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      message: \"test\",\r\n      spaces: []\r\n    };\r\n  }\r\n  handleClick(){\r\n    alert(\"hh\")\r\n\r\n  };\r\n  render() {\r\n    return (  \r\n        <Container className=\"xx-space\">\r\n          <header>\r\n            <Button className=\"LoginButton\">登录</Button>\r\n          </header>\r\n          <Card>\r\n            <Card.Body>\r\n              \r\n            </Card.Body>\r\n            <Button onClick={this.handleClick}>Evernote</Button>\r\n          </Card>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Edit;\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { Route,HashRouter , Switch } from 'react-router-dom';\nimport Post from './components/post';\nimport Home from './components/home';\nimport Edit from './components/edit';\n\nimport {setConfig} from './actions/ReposActions'\nimport './App.css';\nconst token = '2a4917fe31a289c29616b82047f0e03c8c1976a6' // 私有限制权限的token\nconst owner = 'abearxiong'  // 仓库拥有者\nconst name = 'abearxiong.github.io' // 仓库名字\nconst labels = 'xx-space' //'MDU6TGFiZWwxMzU2ODYzMTMz' // label的id\nconst config = {\n  token,\n  owner,\n  name,\n  labels,\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    //store.dispatch({type: Types.SET_CONFIG,data: config})\n    setConfig(config);\n  };\n  componentDidMount () {\n    //console.log(\"App初始化完成\",store)\n  }\n  render() {\n    return (      \n           <Provider store = {store}>\n            <HashRouter>\n              <Route path=\"/\" component={Home}/>\n              <Route path=\"/post/:number\" component={Post}/>\n              <Route path=\"/edit/:id\" component={Edit}/>\n            </HashRouter>\n          </Provider>   \n    );\n  }\n}\n// // mapStateToProps：将state映射到组件的props中\n// const mapStateToProps = (state) => {\n//   return {\n//       user: state.user,\n//   }\n// }\n// // mapDispatchToProps：将dispatch映射到组件的props中\n// const mapDispatchToProps = (dispatch, ownProps) => {\n// return {\n//   setConfig (data) {\n//       dispatch(setConfig(data))\n//   }\n// }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(App)\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}